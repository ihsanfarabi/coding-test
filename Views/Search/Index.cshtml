@model PaginatedList<iaccess_test.Models.SearchStringDTO>
@{
    ViewData["Title"] = "Home Page";
}

<div class="my-5">
    <div class="form-inline justify-content-between mb-3 row">
        <div class="col-9">
            <form asp-controller="Search" asp-action="Insert" method="post">
                <input type="submit" value="Insert Data" class="btn btn-primary" />
            </form>
        </div>
        <div class="col-3">
            <form asp-controller="Search" asp-action="Index" method="get">
                <div class="input-group">
                    <input type="text" class="form-control" name="searchString" value="@ViewData["CurrentFilter"]">
                    <div class="input-group-append">
                        <input type="submit" value="Search" class="btn btn-primary" />
                    </div>
                </div>
            </form>
        </div>
    </div>

    <table class="table table-bordered text-left">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model[0].StringId)
                </th>
                <th scope="col">
                    @Html.DisplayNameFor(model => model[0].StringContent)
                </th>
                <th scope="col">
                    @Html.DisplayNameFor(model => model[0].MatchTimes)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.StringId)
                    </td>
                    <td style="word-break:break-all">
                        @Html.DisplayFor(modelItem => item.StringContent)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.MatchTimes)
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default bg-light @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default bg-light @nextDisabled">
        Next
    </a>
    <a class="btn btn-default">
        Page <strong>@ViewData["PageIndex"]</strong> of <strong>@ViewData["TotalPages"]</strong>
    </a>
</div>
